// <auto-generated />
using System;
using DataAccessPostgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessPostgres.Migrations
{
    [DbContext(typeof(ProgramDbContext))]
    [Migration("20250618194027_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccessPostgres.Models.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Game_Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Game_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DataAccessPostgres.Models.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("User_Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("release_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("DataAccessPostgres.Models.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DataAccessPostgres.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Role_admin")
                        .HasColumnType("boolean");

                    b.Property<string>("User_Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User_login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User_password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GameEntityTagEntity", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("GamesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("GameEntityTagEntity");
                });

            modelBuilder.Entity("DataAccessPostgres.Models.CommentEntity", b =>
                {
                    b.HasOne("DataAccessPostgres.Models.GameEntity", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("Game_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessPostgres.Models.UserEntity", "User")
                        .WithMany("Comments")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessPostgres.Models.GameEntity", b =>
                {
                    b.HasOne("DataAccessPostgres.Models.UserEntity", "User")
                        .WithMany("Games")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameEntityTagEntity", b =>
                {
                    b.HasOne("DataAccessPostgres.Models.GameEntity", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessPostgres.Models.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessPostgres.Models.GameEntity", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DataAccessPostgres.Models.UserEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
